#!/bin/bash
#
#PBS -q long
#PBS -N tst_pgi
#PBS -l nodes=3:ppn=2
#PBS -e /home/jmc/test_aces/output/tst_pgi.stderr
#PBS -o /home/jmc/test_aces/output/tst_pgi.stdout

# $Header: /u/gcmpack/MITgcm/tools/example_scripts/ACESgrid/aces_test_pgi_mpi,v 1.43 2015/04/30 20:22:23 jmc Exp $
# $Name:  $

# ACES-grid PBS-batch script: MPI test using PGI (pgf77) compiler & mpich

if test -f /etc/profile.d/modules.sh ; then
    . /etc/profile.d/modules.sh
fi
# Note: added "ulimit -s unlimited" in file "~/.bashrc"
# to pass big test (the 2 fizhi-cs-* test & adjoint tests) with MPI

umask 0022
#- to get case insensitive "ls" (and order of tested experiments)
export LC_ALL="en_US.UTF-8"
echo " running on: "`hostname`

dNam='aces'
HERE="$HOME/test_$dNam"
OUTP="$HERE/output"; SavD="$HERE/send"
SEND="ssh geo $SavD/mpack"
TST_DIR=$HERE

if test -d $TST_DIR ; then
  echo "start from TST_DIR='$TST_DIR' at: "`date`
else
# if test ! -d /scratch/jm_c ; then mkdir /scratch/jm_c ; fi
  if test ! -d $TST_DIR ; then mkdir $TST_DIR ; fi
  if test ! -d $TST_DIR ; then
    echo "ERROR: Can't create directory \"$TST_DIR\""
    exit 1
  fi
  echo "start in new dir TST_DIR='$TST_DIR' at: "`date`
fi

sfx='pgi'
addExp=''
 module add mpich/$sfx
 export MPI_INC_DIR='/usr/local/pkg/mpich/mpich-pgi/include'
 export NETCDF_ROOT='/usr/local/pkg/pgi/pgi-5.2/linux86/5.2'
 OPTFILE="../tools/build_options/linux_ia32_pgf77"
 options="-MPI 6 -mf $PBS_NODEFILE"
#options="$options -skd tutorial_advection_in_gyre"
 EXE="mpirun -machinefile TR_MFILE -v -np TR_NPROC ./mitgcmuv"

checkOut=1 ; options="$options -do" ; dblRun=19 ;
#options="$options -nc" ; checkOut=0 ; dblRun=0 ;
#options="$options -q"  ; checkOut=0 ; dblRun=0 ;

#- keep a copy of MPI_MFILE:
cp -p $PBS_NODEFILE $OUTP"/mf_"$sfx

cvsArg="-d :pserver:cvsanon@mitgcm.org:/u/gcmpack"
gcmDIR="MITgcm_$sfx"
cd $TST_DIR
#- check for disk space: relative space (99%) or absolute (1.G):
#dsp=`df -P . | tail -1 | awk '{print $5}' | sed 's/%$//'`
#if [ $dsp -gt 99 ] ; then
dsp=`df -P . | tail -1 | awk '{print $4}'`
if [ $dsp -le 1000000 ] ; then
  echo 'Not enough space on this disk => do not run testreport.'
  df .
  exit
fi
if [ $checkOut -eq 1 ] ; then
  if test -d $gcmDIR/CVS ; then
#- remove previous output tar files and tar & remove previous output-dir
    /bin/rm -f $gcmDIR/verification/??_${dNam}-${sfx}_????????_*.tar.gz
    ( cd $gcmDIR/verification
      listD=`ls -1 -d ??_${dNam}-${sfx}_????????_*[0-9] 2> /dev/null`
      for dd in $listD
      do
        if test -d $dd ; then
          tar -cf ${dd}".tar" $dd > /dev/null 2>&1 && gzip ${dd}".tar" && /bin/rm -rf $dd
          RETVAL=$?
          if test "x$RETVAL" != x0 ; then
             echo "ERROR in tar+gzip prev outp-dir: $dd"
             echo " on '"`hostname`"' (return val=$RETVAL) but continue"
          fi
        fi
      done )
#   ( cd $gcmDIR/verification ; ../tools/do_tst_2+2 -clean )
#- clean-up previous TAF output temp dir (generated on old system like here)
#   ( cd $gcmDIR/verification ; /bin/rm -rf  */build/PaxHeaders.[0-9]* )
    echo "cvs update of dir $gcmDIR :"
    ( cd $gcmDIR ; cvs -q $cvsArg update -P -d ) 2>&1
    RETVAL=$?
    if test "x$RETVAL" != x0 ; then
       echo "cvs update on '"`hostname`"' fail (return val=$RETVAL) => exit"
       exit
    fi
  else
    echo "no dir: $gcmDIR/CVS => try a fresh check-out"
    checkOut=2
  fi
fi
if [ $checkOut -eq 2 ] ; then
  if test -e $gcmDIR ; then
     rm -rf $gcmDIR
  fi
# cvs co MITgcm
  cvs $cvsArg co -P -d $gcmDIR MITgcm > /dev/null 2>&1
  for exp2add in $addExp ; do
   echo " add dir: $exp2add (from Contrib:verification_other)"
   ( cd $gcmDIR/verification ; cvs $cvsArg co -P -d $exp2add \
                  MITgcm_contrib/verification_other/$exp2add > /dev/null 2>&1 )
  done
  /usr/bin/find $gcmDIR -type d | xargs chmod g+rxs
  /usr/bin/find $gcmDIR -type f | xargs chmod g+r
fi

#- change dir to $gcmDIR/verification dir:
if test -e $gcmDIR/verification ; then
  if [ $checkOut -lt 2 ] ; then
    echo " dir $gcmDIR/verification exist" ; fi
  cd $gcmDIR/verification
else
  echo "no dir: $gcmDIR/verification => exit"
  exit
fi

if [ $dblRun -ge 1 ] ; then

 test -f tr_cmpnum && cp -p tr_cmpnum tr_cmpnum.sav
 echo ./testreport $options -of $OPTFILE -command \"$EXE\" -odir ${dNam}-$sfx
 ./testreport $options -of $OPTFILE -command "$EXE" -odir ${dNam}-$sfx
 test -f tr_cmpnum.sav && mv -f tr_cmpnum.sav tr_cmpnum

 iRun=0 ; nFail=0 ; totObj=0 ; prevNb=0
 #- counts executables and number of Object files:
   bldDir='build' ; gcmExe='mitgcmuv'
   listD=`ls */$bldDir/Makefile | sed "s/\/$bldDir\/Makefile//g"`
   for yy in $listD ; do
     objNb=`( cd $yy/$bldDir ; ls *.o | wc -l)`
     totObj=`expr $totObj + $objNb`
   done
   exeNb=`ls */$bldDir/$gcmExe | wc -l`
   expNb=`echo $listD | wc -w`
   nFail=`expr $expNb - $exeNb`
   printf " %2i : Exe=%3i , Exp=%3i , Fail=%3i , Total # of Obj= %i\n" \
            $iRun $exeNb    $expNb    $nFail    $totObj
 #----
 reRun=$nFail
 while test $reRun != 0 ; do
   iRun=`expr $iRun + 1`
   printf "  fails=%3i , prev=%3i ==> Re-run (run #%2i ):\n" $nFail $prevNb $iRun
   echo ./testreport $options -of $OPTFILE -command \"$EXE\" -odir ${dNam}-$sfx -q
   ./testreport $options -of $OPTFILE -command "$EXE" -odir ${dNam}-$sfx -q
   #- update counts:
   prevNb=$totObj ; totObj=0
   for yy in $listD ; do
     objNb=`( cd $yy/$bldDir ; ls *.o | wc -l)`
     totObj=`expr $totObj + $objNb`
   done
   exeNb=`ls */$bldDir/$gcmExe | wc -l`
   nFail=`expr $expNb - $exeNb`
   printf " %2i : Exe=%3i , Exp=%3i , Fail=%3i , Total # of Obj= %i\n" \
            $iRun $exeNb    $expNb    $nFail    $totObj
   if test $nFail = 0 -o $totObj = $prevNb ; then reRun=0 ; fi
   if [ $iRun -ge $dblRun ] ; then reRun=0 ; fi
 done

 #-- send output (adapted from testreport):
 outpSum=`ls -t tr_${dNam}-${sfx}_????????_*/summary.txt | head -1`
 #- only if converge within "dblRun" attempt
 if test $nFail != 0 -a $totObj != $prevNb ; then outpSum='' ; fi
 if test "x$outpSum" != x ; then
   dirRes=`echo $outpSum | sed 's/\/summary.txt$//'`
   tar -cf ${SavD}/${dirRes}".tar" $dirRes > /dev/null 2>&1 \
           && gzip ${SavD}/${dirRes}".tar" \
           && $SEND -s MITgcm-test -m 3555000 ${SavD}/${dirRes}".tar.gz" -a jmc@mitgcm.org
   RETVAL=$?
   if test "x$RETVAL" != x0 ; then
     echo "ERROR in tar/gzip/send results dir \"$dirRes\" to jmc@mitgcm.org"
   else
     echo " $dirRes output sent to email jmc@mitgcm.org"
     test -f ${SavD}/${dirRes}".tar" &&  rm -f ${SavD}/${dirRes}".tar"
     test -f ${SavD}/${dirRes}".tar.gz" &&  rm -f ${SavD}/${dirRes}".tar.gz"
   fi
 fi

else

 echo ./testreport $options -of $OPTFILE -command \"$EXE\" -odir ${dNam}-$sfx \
   -send \"$SEND\" -sd $SavD -a jmc@mitgcm.org
 ./testreport $options -of $OPTFILE -command "$EXE" -odir ${dNam}-$sfx \
   -send "$SEND" -sd $SavD -a jmc@mitgcm.org

fi
